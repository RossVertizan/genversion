/* global describe,it,afterEach,beforeEach */

// See https://www.npmjs.com/package/command-line-test
const CliTest = require('command-line-test')
const path = require('path')
const fs = require('fs-extra')
const should = require('should') // eslint-disable-line no-unused-vars
const firstline = require('firstline')
const pjson = require('../package')

// If global command is used, you must 'npm link' before tests.
// const COMMAND = 'genversion'; // Global
const GENERATE_COMMAND = 'bin/genversion.js' // Local

// Known signature
const SIGNATURE = '// generated by genversion\n'
// Temporary place for the generated version module
const P = '.tmp/v.js'

const removeTemp = () => {
  if (fs.existsSync(P)) {
    fs.unlinkSync(P)
    fs.rmdirSync(path.dirname(P))
  }
}

describe('genversion cli', () => {
  beforeEach(() => {
    removeTemp()
  })

  afterEach(() => {
    removeTemp()
  })

  it('should generate file and dir if they do not exist', (done) => {
    const clit = new CliTest()

    clit.exec(GENERATE_COMMAND + ' ' + P, (err, response) => {
      if (err) {
        console.error(err, response)
        return
      }

      // Should not have any output
      response.stdout.should.equal('')
      response.stderr.should.equal('')

      fs.existsSync(P).should.equal(true)

      clit.exec(GENERATE_COMMAND + ' --check-only' + P, (err, response) => {
        if (err) {
          console.error(err, response)
          return
        }
        // Should not have any output
        response.stdout.should.equal('')
        response.stderr.should.equal('')
        return done()
      })
    })
  })

  it('should not generate if unknown file exists', (done) => {
    // Generate file with unknown signature
    const INVALID_SIGNATURE = 'foobarcontent'
    fs.outputFileSync(P, INVALID_SIGNATURE)

    const clit = new CliTest()

    clit.exec(GENERATE_COMMAND + ' ' + P, (err, response) => {
      if (err) {
        console.error(err, response)
        return
      }

      response.stderr.should.startWith('ERROR')

      // Ensure the file was not replaced
      firstline(P).then((line) => {
        line.should.equal(INVALID_SIGNATURE)
        return done()
      }).catch((errc) => {
        return done(errc)
      })
    })
  })

  it('should allow --es6 flag', (done) => {
    const clit = new CliTest()

    clit.exec(GENERATE_COMMAND + ' --es6 ' + P, (err, response) => {
      if (err) {
        console.error(err, response)
        return
      }

      fs.readFileSync(P).toString().should.equal(SIGNATURE +
        'export const version = \'' + pjson.version + '\'\n')

      clit.exec(GENERATE_COMMAND + ' --es6 --check-only' + P, (err, response) => {
        if (err) {
          console.error(err, response)
          return
        }
        return done()
      })
    })
  })

  it('should allow --semi and --es6 flag', (done) => {
    const clit = new CliTest()

    clit.exec(GENERATE_COMMAND + ' --semi --es6 ' + P, (err, response) => {
      if (err) {
        console.error(err, response)
        return
      }

      fs.readFileSync(P).toString().should.equal(SIGNATURE +
        'export const version = \'' + pjson.version + '\';\n')

      return done()
    })
  })

  it('should allow verbose flag', (done) => {
    const clit = new CliTest()

    clit.exec(GENERATE_COMMAND + ' -v ' + P, (err, response) => {
      if (err) {
        console.error(err, response)
        return
      }

      response.stdout.should.containEql(pjson.version)

      return done()
    })
  })

  it('should allow source argument with filepath', (done) => {
    const clit = new CliTest()

    const cmd = GENERATE_COMMAND + ' --source ./test/fixture/package.json ' + P
    clit.exec(cmd, (err, resp) => {
      if (err) {
        console.error(err, resp)
        return
      }

      const wantedContent = SIGNATURE + 'module.exports = \'0.1.2\'\n'
      fs.readFileSync(P).toString().should.equal(wantedContent)

      return done()
    })
  })

  it('should allow source argument with dirpath', (done) => {
    const clit = new CliTest()

    const cmd = GENERATE_COMMAND + ' --source ./test/fixture ' + P
    clit.exec(cmd, (err, resp) => {
      if (err) {
        console.error(err, resp)
        return
      }

      const wantedContent = SIGNATURE + 'module.exports = \'0.1.2\'\n'
      fs.readFileSync(P).toString().should.equal(wantedContent)

      return done()
    })
  })

  it('should detect missing target path', (done) => {
    const clit = new CliTest()

    clit.exec(GENERATE_COMMAND + ' -v', (err, response) => {
      if (err) {
        console.error(err, response)
        return
      }

      // NOTE: response.stderr is null because process exited with code 1
      response.error.code.should.equal(1)

      return done()
    })
  })

  it('should show version', (done) => {
    const clit = new CliTest()

    clit.exec(GENERATE_COMMAND + ' --version', (err, response) => {
      if (err) {
        console.error(err)
        return
      }

      response.stdout.should.equal(pjson.version)

      return done()
    })
  })
})
