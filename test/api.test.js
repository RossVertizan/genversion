/* global describe,it,afterEach,beforeEach */

const should = require('should')  // eslint-disable-line no-unused-vars
const path = require('path')
const fs = require('fs-extra')
const gv = require('../index')
const pjson = require('../package')

const P = '.tmp/v.js'

const removeTemp = function () {
  if (fs.existsSync(P)) {
    fs.unlinkSync(P)
    fs.rmdirSync(path.dirname(P))
  }
}

describe('genversion api', function () {
  beforeEach(function () {
    removeTemp()
  })

  afterEach(function () {
    removeTemp()
  })

  it('should detect missing version file', function (done) {
    gv.check('version.js', function (err, doesExist, isByGenversion) {
      should.equal(err, null)
      doesExist.should.equal(false)
      isByGenversion.should.equal(false)

      return done()
    })
  })

  it('should recognise es6 flag', function (done) {
    gv.generate(P, { useEs6Syntax: true }, function (err, version) {
      should.equal(err, null)
      version.should.equal(pjson.version)

      fs.readFileSync(P).toString().should.equal('// generated by ' +
        'genversion\nexport const version = \'' + pjson.version + '\'\n')

      gv.generate(P, function (err2) {
        should.equal(err2, null)
        fs.readFileSync(P).toString().should.equal('// generated by ' +
          'genversion\nmodule.exports = \'' + pjson.version + '\'\n')

        return done()
      })
    })
  })

  it('should recognise source flag', function (done) {
    gv.generate(P, { source: './test/fixture' }, function (err, v) {
      should.equal(err, null)
      v.should.equal('0.1.2')

      fs.readFileSync(P).toString().should.equal('// generated by ' +
        'genversion\nmodule.exports = \'0.1.2\'\n')

      return done()
    })
  })
})
