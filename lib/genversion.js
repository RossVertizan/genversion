
const makeAbsolute = require('./makeAbsolute')
const path = require('path')
const firstline = require('firstline')
const findPackage = require('find-package')
const fs = require('fs')
const mkdirp = require('mkdirp')

const SIGNATURE = require('./versionTools').SIGNATURE
const createContent = require('./versionTools').createContent

exports.check = (targetPath, callback) => {
  // Check if a version file can be generated.
  //
  // Parameters
  //   targetPath
  //     relative or absolute filepath to version file.
  //   callback
  //     function (err, doesExist, isByGenversion)
  //       err
  //         non-null on file system error
  //       doesExist
  //         boolean
  //       isByGenversion
  //         boolean, true if file exists and is generated by genversion.
  //         The check is done by comparing the SIGNATURE on the first line.
  //
  const absTarget = makeAbsolute(targetPath)

  // Ensure that target does not exist or if it exists,
  // ensure it was generated by genversion. Otherwise
  // exit with an error.
  firstline(absTarget)
    .then(line => {
      if (line.trim() === SIGNATURE) {
        // OK, the existing file was generated by us.
        return callback(null, true, true)
      }
      // Unknown file
      return callback(null, true, false)
    })
    .catch(err => {
      if (err.code === 'ENOENT') {
        // OK, file does not exist.
        return callback(null, false, false)
      }
      // Real error.
      return callback(err, false, false)
    })
}

exports.generate = (targetPath, opts, callback) => {
  // Generate version submodule file to targetPath with utf-8 encoding.
  //
  // Parameters:
  //   targetPath
  //     string. absolute or relative path
  //   opts
  //     optional object with optional properties
  //       useSemicolon
  //         bool, true to use semicolons in generated code
  //   callback
  //     function (err, version)
  //       err
  //         null if generated successfully
  //         non-null if no package.json found or version in it is invalid
  //       version
  //         new version string, undefined on error
  //
  if (typeof targetPath !== 'string') {
    throw new Error('Unexpected targetPath argument')
  }

  if (typeof callback !== 'function') {
    if (typeof opts !== 'function') {
      throw new Error('Unexpected callback argument')
    } else {
      callback = opts
      opts = {}
    }
  }

  if (typeof opts !== 'object') {
    throw new Error('Unexpected opts argument')
  }

  if (typeof opts.useSemicolon !== 'boolean') {
    opts.useSemicolon = false // default
  }

  if (typeof opts.useEs6Syntax !== 'boolean') {
    opts.useEs6Syntax = false // default
  }

  if (typeof opts.source !== 'string') {
    opts.source = targetPath // default
  }

  const absTarget = makeAbsolute(targetPath)
  const absSource = makeAbsolute(opts.source)

  // Find closest package.json from the target towards filesystem root
  const pjson = findPackage(absSource)

  // findPackage returns null if not found
  if (pjson === null) {
    const err = new Error('No package.json found along path ' + absSource)
    return callback(err)
  }

  // Get version property
  const version = pjson.version

  // Ensure version is string
  if (typeof version !== 'string') {
    const err = new Error('Invalid version in package.json: ' + version)
    return callback(err)
  }

  // Ensure directory exists before writing file
  mkdirp(path.dirname(absTarget), errp => {
    if (errp) {
      return callback(errp)
    }

    const content = createContent(version, opts)

    fs.writeFile(absTarget, content, 'utf8', errw => {
      if (errw) {
        return callback(errw)
      }
      return callback(null, version)
    })
  })
}
